/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ { 
	macros {
		mac_ltgt: mac_ltgt {
			label = "lt_gt";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&macro_tap &kp LT &kp GT &kp LEFT_ARROW>;
		};
		mac_brc: mac_brc {
			label = "lbrc_rbrc";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&macro_tap &kp LBRC &kp RBRC &kp LEFT_ARROW>;
		};
		mac_par: mac_par {
			label = "lpar_rpar";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&macro_tap &kp LPAR &kp RPAR &kp LEFT_ARROW>;
		};
		mac_bkt: mac_bkt {
			label = "lbkt_rbkt";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&macro_tap &kp LBKT &kp RBKT &kp LEFT_ARROW>;
		};
		mac_eqt: mac_eqt {
			label = "bsh_lpar_bsh_rpar";
			compatible = "zmk,behaviour-macro";
			#binding-cells = <0>;
			bindings 
			= <&macro_tap &kp BSLH &kp LPAR &kp BSLH &kp RPAR &kp LEFT_ARROW &kp LEFT_ARROW>;
		};
		mac_sqt: mac_sqt {
			label = "sqt_sqt";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&macro_tap &kp SQT &kp SQT &kp LEFT_ARROW>;
		};
		mac_dqt: mac_dqt {
			label = "dqt_dqt";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&macro_tap &kp DQT &kp DQT &kp LEFT_ARROW>;
		};
	};
	
	behaviors {
		hm: homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping-term-ms = <300>;
			quick-tap-ms = <0>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
		ht_ltgt: ht_ltgt {
			compatible = "zmk,behavior-hold-tap";
			label = "hold_tap_ltgt";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <0>;
			flavor = "tap-preferred";
			bindings = <&mac_ltgt>, <&kp>;
		};
		ht_brc: ht_brc {
			compatible = "zmk,behavior-hold-tap";
			label = "hold_tap_brc";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <0>;
			flavor = "tap-preferred";
			bindings = <&mac_brc>, <&kp>;
		};
		ht_par: ht_par {
			compatible = "zmk,behavior-hold-tap";
			label = "hold_tap_par";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <0>;
			flavor = "tap-preferred";
			bindings = <&mac_par>, <&kp>;
		};
		ht_bkt: ht_bkt {
			compatible = "zmk,behavior-hold-tap";
			label = "hold_tap_bkt";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <0>;
			flavor = "tap-preferred";
			bindings = <&mac_bkt>, <&kp>;
		};
		ht_eqt: ht_eqt {
			compatible = "zmk,behavior-hold-tap";
			label = "hold_tap_equat";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <0>;
			flavor = "tap-preferred";
			bindings = <&mac_eqt>, <&kp>;
		};
		ht_sqt: ht_sqt {
			compatible = "zmk,behavior-hold-tap";
			label = "hold_tap_sqt";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <0>;
			flavor = "tap-preferred";
			bindings = <&mac_sqt>, <&kp>;
		};
		ht_dqt: ht_dqt {
			compatible = "zmk,behavior-hold-tap";
			label = "hold_tap_dqt";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <0>;
			flavor = "tap-preferred";
			bindings = <&mac_dqt>, <&kp>;
		};
	};
	
	conditional_layers {
		compatible = "zmk,conditional-layers";
		tri_layer {
			if-layers = <2 3>;
			then-layer = <4>;
		};
	};

	combos {
		compatible = "zmk,combos";
		combo_tognone {
			timeout-ms = <300>;
			key-positions = <0 9 30 33>;
			bindings = <&tog 5>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		
		default_layer {
			bindings = <
				&kp Q 			&kp W 			&kp F 			&kp P 			&kp B 			&kp J 			&kp L 			&kp U 			&kp Y 			&ht_sqt 0 SQT 
				&kp A 			&hm LGUI R 		&hm LALT S 		&hm LCTRL T 		&kp G 			&kp M 			&hm RCTRL N 		&hm RALT E 		&hm RGUI I 		&kp O 
				&kp Z 			&kp X 			&kp C 			&kp D 			&kp V 			&kp K 			&kp H 			&kp CMMA 		&kp DOT 		&kp SLASH 
													&lt 2 tog 2		&kp LEFT_SHIFT 		&kp SPACE 		&mo 3 
			>;
		};
		
		qwert_layer {
			bindings = <
				&kp Q 			&kp W 			&kp E 			&kp R 			&kp T			&kp Y 			&kp U 			&kp I 			&kp O 			&kp P 
				&kp A 			&kp S 			&kp D 			&kp F 			&kp G 			&kp H 			&kp J 			&kp K 			&kp L 			&kp QUOT 
				&kp Z 			&kp X 			&kp C 			&kp V 			&kp B 			&kp N 			&kp M 			&kp CMMA 		&kp DOT 		&kp SLASH 
													&mo 2 			&kp LEFT_SHIFT 		&kp SPACE 		&mo 3 
			>;
		};
		
		nav_layer {
			bindings = <
				&kp END 		&kp PAGE_DOWN 		&kp PAGE_UP 		&kp HOME 		&hm LG(TAB) ESCAPE 	&kp KP_PLUS 		&kp N7 			&kp N8 			&kp N9 			&kp KP_MULTIPLY 
				&kp LEFT_ARROW 		&kp DOWN_ARROW 		&kp UP_ARROW 		&kp RIGHT_ARROW 	&kp TAB 		&kp DOT 		&hm RCTRL N4 		&hm RALT N5 		&hm RGUI N6 		&kp N0 
				&hm LC(LG(LEFT)) LA(LS(TAB)) &hm LC(LG(RIGHT)) LA(TAB) &hm LA(LEFT) LC(LS(TAB)) &hm LA(RIGHT) LC(TAB) &kp DELETE 	&kp KP_MINUS 		&kp N1 			&kp N2 			&kp N3 			&kp KP_DIVIDE 
													&mo 2 			&kp LEFT_SHIFT 		&kp RETURN 		&mo 3 
			>;
		};
		
		sym_layer {
			bindings = <
				&none 			&none 			&kp SEMICOLON 		&kp COLON 		&kp LC(EQUAL) 		&kp LC(LS(EQUAL)) 	&kp AMPS 		&kp GRAVE 		&kp TILDE 		&none 
				&ht_eqt 0 BSLH 	&ht_ltgt 0 LT 		&ht_brc 0 LBRC 		&ht_par 0 LPAR 		&ht_bkt 0 LBKT 		&kp EQUAL 		&kp DLLR 		&kp PRCNT 		&kp CARET 		&kp UNDER 
				&kp PIPE 		&kp GT 			&kp RBRC 		&kp RPAR 		&kp RBKT 		&none 			&kp EXCL 		&kp AT 			&kp HASH 		&none 
													&mo 2 			&kp BACKSPACE 		&none 			&mo 3 
			>;
		};	
		
		tri_layer {
			bindings = <
				&bt BT_CLR 		&kp C_MUTE 		&kp C_VOLUME_DOWN 	&kp C_VOLUME_UP 	&kp C_BRIGHTNESS_INC 	&tog 1 			&kp F7 			&kp F8 			&kp F9 			&kp F10 
				&kp PSCRN 		&hm LGUI C_PREV 	&hm LALT C_PLAY_PAUSE 	&hm LCTRL C_NEXT 	&kp C_BRIGHTNESS_DEC 	&none 			&hm RCTRL F4 		&hm RALT F5 		&hm RGUI F6 		&kp F11 
				&bt BT_SEL 4 		&bt BT_SEL 3 		&bt BT_SEL 2 		&bt BT_SEL 1 		&bt BT_SEL 0 		&none 			&kp F1 			&kp F2 			&kp F3 			&kp F12 
													&trans 			&kp LEFT_SHIFT 		&none 			&trans 
			>;
		};
		
		none_layer {
			bindings = <
				&none 			&none 			&none 			&none 			&none 			&none 			&none 			&none 			&none 			&none 
				&none 			&none 			&none 			&none 			&none 			&none 			&none 			&none 			&none 			&none 
				&none 			&none 			&none 			&none 			&none 			&none 			&none 			&none 			&none 			&none 
													&none 			&none 			&none 			&none 
			>;
		};
	};
};
